/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainView.java
 *
 * Created on Apr 16, 2010, 8:42:34 PM
 */
package de.hansinator.fun.jgp.gui;

import java.awt.AWTError;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import de.hansinator.fun.jgp.simulation.WorldSimulation;
import de.hansinator.fun.jgp.simulation.WorldSimulation.SimulationViewUpdateListener;

/**
 * 
 * @author hansinator
 */
public class WorldSimulationView extends javax.swing.JPanel
{
	private final WorldSimulation simulation;
	
	public final de.hansinator.fun.jgp.gui.DebugDrawJ2D draw;
	
	private final Object drawLock = new Object();
	
	private Graphics2D dbg = null;
	  private Image dbImage = null;
	  
	  private int panelWidth;
	  private int panelHeight;
	  
	
	public Graphics2D getDBGraphics() {
	    return dbg;
	  }
	
	 private void updateSize(int argWidth, int argHeight) {
		    panelWidth = argWidth;
		    panelHeight = argHeight;
		    draw.getViewportTranform().setExtents(argWidth / 2, argHeight / 2);
		  }
	
	  public boolean render() {
		    if (dbImage == null) {
		      //log.debug("dbImage is null, creating a new one");
		      if (panelWidth <= 0 || panelHeight <= 0) {
		        return false;
		      }
		      dbImage = createImage(panelWidth, panelHeight);
		      if (dbImage == null) {
		        //log.error("dbImage is still null, ignoring render call");
		        return false;
		      }
		      dbg = (Graphics2D) dbImage.getGraphics();
		    }
		    return true;
		  }

		  public void paintScreen() {
		    try {
		      Graphics g = this.getGraphics();
		      if ((g != null) && dbImage != null) {
		        g.drawImage(dbImage, 0, 0, null);
		        Toolkit.getDefaultToolkit().sync();
		        g.dispose();
		      }
		    } catch (AWTError e) {
		      System.out.println("Graphics context error" + e);
		    }
		  }

	/*
	 * TODO: add setters for things to draw or make a worldmodel including all
	 * stuff to draw possibly make object lists for world objects, like bodies
	 * and food
	 */
	/** Creates new form MainView */
	public WorldSimulationView(final WorldSimulation simulation)
	{
		draw = new de.hansinator.fun.jgp.gui.DebugDrawJ2D(this);
		this.simulation = simulation;
		simulation.world.setDraw(draw);
		initComponents();
		
		simulation.addViewUpdateListener( new SimulationViewUpdateListener() {
			
			@Override
			public void onViewUpdate()
			{
				synchronized(drawLock)
				{
					if(render()) {
						Graphics g = dbg;
						dbg.setColor(Color.black);
					    dbg.fillRect(0, 0, panelWidth, panelHeight);
					    
					    simulation.world.draw(g, simulation.getOrganismsByGenomeMap());
					    
						if (simulation.getRPS() != 0)
						{
							g.setColor(Color.yellow);
							g.drawString("RPS: " + simulation.getRPS(), 10, 15);
						}
	
						int progress = (simulation.getCurrentRound() * 100) / WorldSimulation.ROUNDS_PER_GENERATION;
						if (progress != 0)
						{
							g.setColor(Color.yellow);
							g.drawString("" + progress + "%", 10, 30);
						}

				        paintScreen();
				      }
				}
			}
		});

		addMouseListener(new MouseListener()
		{

			@Override
			public void mouseClicked(MouseEvent e)
			{
				simulation.world.clickEvent(e, simulation.getOrganismsByGenomeMap());
				// FIXME only repaint if necessary
				repaint();
			}

			@Override
			public void mousePressed(MouseEvent e)
			{
			}

			@Override
			public void mouseReleased(MouseEvent e)
			{
			}

			@Override
			public void mouseEntered(MouseEvent e)
			{
			}

			@Override
			public void mouseExited(MouseEvent e)
			{
			}

		});
		
		  addComponentListener(new ComponentAdapter() {
		      @Override
		      public void componentResized(ComponentEvent e) {
		        updateSize(getWidth(), getHeight());
		        synchronized(drawLock)
				{
		        	dbImage = null;
		        	render();
				}
		      }
		    });
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents()
	{

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 400,
				Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 300,
				Short.MAX_VALUE));
	}// </editor-fold>//GEN-END:initComponents

	@Override
	public void paint(Graphics g)
	{
		super.paint(g);
		synchronized(drawLock)
		{
			g.drawImage(dbImage, 0, 0, null);
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	// End of variables declaration//GEN-END:variables
}
