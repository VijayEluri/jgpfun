/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainView.java
 *
 * Created on Apr 16, 2010, 8:42:34 PM
 */
package jgpfun;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Polygon;
import java.util.List;

/**
 *
 * @author hansinator
 */
public class MainView extends javax.swing.JPanel {

    List<Food> curFood;
    List<Organism> curOrganisms;
    private int rps;

    /** Creates new form MainView */
    public MainView() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paint(Graphics g) {
        super.paint(g);

        g.setColor(Color.black);
        g.fillRect(0, 0, this.getWidth(), this.getHeight());

        if (curFood != null) {
            drawFood(curFood, g);
        }

        if (curOrganisms != null) {
            drawOrganisms(curOrganisms, g);
        }

        if(rps != 0) {
            g.setColor(Color.yellow);
            g.drawString("RPS: " + rps, 10, 15);
        }
    }

    public void drawStuff(List<Food> food, List<Organism> organisms, int rps) {
        this.curFood = food;
        this.curOrganisms = organisms;
        this.rps = rps;
    }

    private void drawFood(List<Food> food, Graphics g) {
        g.setColor(Color.green);

        for (Food f : food) {
            g.fillOval(f.x, f.y, 2, 2);
        }
    }

    private void drawOrganisms(List<Organism> organisms, Graphics g) {
        g.setColor(Color.red);

        for (Organism o : organisms) {
            //Polygon p = new Polygon();
            double sindir = Math.sin(o.dir);
            double cosdir = Math.cos(o.dir);
            int xrot = (int)Math.floor(8.0 * sindir);
            int yrot = (int)Math.floor(8.0 * cosdir);

            /*p.addPoint((o.x - xrot), (o.y + yrot));
            p.addPoint((o.x + xrot), (o.y + yrot));
            p.addPoint(o.x + xrot, o.y - 6 + yrot);*/

            g.drawLine(o.x, o.y, o.x+xrot, o.y-yrot);
            g.fillOval(o.x, o.y, 4, 4);
            /*g.drawPolygon(p);
            g.fillPolygon(p);*/
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
